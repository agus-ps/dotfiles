# vim:fileencoding=utf-8:foldmethod=marker

#: Fonts {{{

#: kitty has very powerful font management. You can configure
#: individual font faces and even specify special fonts for particular
#: characters.

font_family      Hack Nerd Font Regular
bold_font        auto
italic_font      auto
bold_italic_font auto

#: You can specify different fonts for the bold/italic/bold-italic
#: variants. The easiest way to select fonts is to run the `kitten
#: choose-fonts` command which will present a nice UI for you to
#: select the fonts you want with previews and support for selecting
#: variable fonts and font features. If you want to learn to select
#: fonts manually, read the font specification syntax
#: <https://sw.kovidgoyal.net/kitty/kittens/choose-fonts/#font-spec-
#: syntax>.

font_size 11.0

#: Font size (in pts).

# force_ltr no

#: kitty does not support BIDI (bidirectional text), however, for RTL
#: scripts, words are automatically displayed in RTL. That is to say,
#: in an RTL script, the words "HELLO WORLD" display in kitty as
#: "WORLD HELLO", and if you try to select a substring of an RTL-
#: shaped string, you will get the character that would be there had
#: the string been LTR. For example, assuming the Hebrew word ירושלים,
#: selecting the character that on the screen appears to be ם actually
#: writes into the selection buffer the character י. kitty's default
#: behavior is useful in conjunction with a filter to reverse the word
#: order, however, if you wish to manipulate RTL glyphs, it can be
#: very challenging to work with, so this option is provided to turn
#: it off. Furthermore, this option can be used with the command line
#: program GNU FriBidi <https://github.com/fribidi/fribidi#executable>
#: to get BIDI support, because it will force kitty to always treat
#: the text as LTR, which FriBidi expects for terminals.

# symbol_map

#: E.g. symbol_map U+E0A0-U+E0A3,U+E0C0-U+E0C7 PowerlineSymbols

#: Map the specified Unicode codepoints to a particular font. Useful
#: if you need special rendering for some symbols, such as for
#: Powerline. Avoids the need for patched fonts. Each Unicode code
#: point is specified in the form `U+<code point in hexadecimal>`. You
#: can specify multiple code points, separated by commas and ranges
#: separated by hyphens. This option can be specified multiple times.
#: The syntax is::

#:     symbol_map codepoints Font Family Name

# narrow_symbols

#: E.g. narrow_symbols U+E0A0-U+E0A3,U+E0C0-U+E0C7 1

#: Usually, for Private Use Unicode characters and some symbol/dingbat
#: characters, if the character is followed by one or more spaces,
#: kitty will use those extra cells to render the character larger, if
#: the character in the font has a wide aspect ratio. Using this
#: option you can force kitty to restrict the specified code points to
#: render in the specified number of cells (defaulting to one cell).
#: This option can be specified multiple times. The syntax is::

#:     narrow_symbols codepoints [optionally the number of cells]

disable_ligatures cursor

#: Choose how you want to handle multi-character ligatures. The
#: default is to always render them. You can tell kitty to not render
#: them when the cursor is over them by using cursor to make editing
#: easier, or have kitty never render them at all by using always, if
#: you don't like them. The ligature strategy can be set per-window
#: either using the kitty remote control facility or by defining
#: shortcuts for it in kitty.conf, for example::

#:     map alt+1 disable_ligatures_in active always
#:     map alt+2 disable_ligatures_in all never
#:     map alt+3 disable_ligatures_in tab cursor

#: Note that this refers to programming ligatures, typically
#: implemented using the calt OpenType feature. For disabling general
#: ligatures, use the font_features option.

font_features +zero

#: E.g. font_features none

#: Choose exactly which OpenType features to enable or disable. Note
#: that for the main fonts, features can be specified when selecting
#: the font using the choose-fonts kitten. This setting is useful for
#: fallback fonts.

#: Some fonts might have features worthwhile in a terminal. For
#: example, Fira Code includes a discretionary feature, zero, which in
#: that font changes the appearance of the zero (0), to make it more
#: easily distinguishable from Ø. Fira Code also includes other
#: discretionary features known as Stylistic Sets which have the tags
#: ss01 through ss20.

#: For the exact syntax to use for individual features, see the
#: HarfBuzz documentation <https://harfbuzz.github.io/harfbuzz-hb-
#: common.html#hb-feature-from-string>.

#: Note that this code is indexed by PostScript name, and not the font
#: family. This allows you to define very precise feature settings;
#: e.g. you can disable a feature in the italic font but not in the
#: regular font.

#: On Linux, font features are first read from the FontConfig database
#: and then this option is applied, so they can be configured in a
#: single, central place.

#: To get the PostScript name for a font, use the `fc-scan file.ttf`
#: command on Linux or the `Font Book tool on macOS
#: <https://apple.stackexchange.com/questions/79875/how-can-i-get-the-
#: postscript-name-of-a-ttf-font-installed-in-os-x>`__.

#: Enable alternate zero and oldstyle numerals::

#:     font_features FiraCode-Retina +zero +onum

#: Enable only alternate zero in the bold font::

#:     font_features FiraCode-Bold +zero

#: Disable the normal ligatures, but keep the calt feature which (in
#: this font) breaks up monotony::

#:     font_features TT2020StyleB-Regular -liga +calt

#: In conjunction with force_ltr, you may want to disable Arabic
#: shaping entirely, and only look at their isolated forms if they
#: show up in a document. You can do this with e.g.::

#:     font_features UnifontMedium +isol -medi -fina -init

# text_fg_override_threshold 4.5 ratio


#: Text cursor customization {{{

# Text cursor customization

# cursor #cccccc
#: Color del cursor.
#: Valores: Color hexadecimal (ej: #FF0000) o 'none' (video inverso).

# cursor_text_color #111111
#: Color del texto que está bajo el cursor.
#: Valores: Color hexadecimal o 'background'. Se ignora si 'cursor' es 'none'.

# cursor_shape block
#: Forma predeterminada del cursor.
#: Valores: 'block', 'beam', 'underline'.

# cursor_shape_unfocused hollow
#: Forma del cursor cuando la ventana no está en foco.
#: Valores: 'block', 'beam', 'underline', 'hollow', 'unchanged'.

# cursor_beam_thickness 1.5
#: Grosor del cursor tipo 'beam' (en puntos).
#: Valores: Número flotante (ej: 1.0, 2.5).

# cursor_underline_thickness 2.0
#: Grosor del cursor tipo 'underline' (en puntos).
#: Valores: Número flotante (ej: 1.0, 3.0).

# cursor_blink_interval -1
#: Intervalo de parpadeo del cursor (en segundos).
#: Valores: Número positivo (segundos), '0' (desactivar), Negativo (usar sistema), o una función de 'easing' para animación.

# cursor_stop_blinking_after 15.0
#: Detener el parpadeo después de la inactividad (en segundos).
#: Valores: Número positivo (segundos) o '0' (nunca detener).

# cursor_trail 0
#: Habilita el rastro animado del cursor al moverse (en milisegundos). '0' para desactivar.
#: Valores: Número entero positivo (ms) o '0'.

# cursor_trail_decay 0.1 0.4
#: Velocidad de desvanecimiento del rastro (rápido y lento en segundos).
#: Valores: Dos números flotantes positivos (ej: 0.1 0.4).

# cursor_trail_start_threshold 2
#: Distancia mínima de movimiento del cursor (en celdas) para iniciar el rastro.
#: Valores: Número entero positivo.

# cursor_trail_color none
#: Color del rastro del cursor. 'none' usa el color del cursor.
#: Valores: Color hexadecimal (ej: #00FF00) o 'none'.

#: }}}

#: Scrollback {{{

# scrollback_lines 2000
#: Número de líneas de historial a mantener en memoria.
#: Valores: Número entero positivo (líneas) o negativo (infinito).

# scrollbar scrolled
#: Controla cuándo se muestra la barra de desplazamiento.
#: Valores: 'scrolled', 'hovered', 'scrolled-and-hovered', 'always', 'never'.

# scrollbar_interactive yes
#: Si está deshabilitada, la barra de desplazamiento no es controlable con el ratón.
#: Valores: 'yes' o 'no'.

# scrollbar_jump_on_click yes
#: Al hacer clic en la pista de la barra, salta a la posición (si 'yes').
#: Valores: 'yes' o 'no'.

scrollbar_width 0.1
#: Ancho de la barra de desplazamiento (en unidades de ancho de celda).
#: Valores: Número flotante (ej: 0.5).

scrollbar_hover_width 1
#: Ancho de la barra al pasar el ratón por encima (en unidades de ancho de celda).
#: Valores: Número flotante (ej: 1).

# scrollbar_handle_opacity 0.5
#: Opacidad del "mango" de la barra de desplazamiento (0 = transparente, 1 = opaco).
#: Valores: Número flotante entre 0 y 1.

# scrollbar_radius 0.3
#: Radio (curvatura) del "mango" de la barra de desplazamiento.
#: Valores: Número flotante (ej: 0.3).

# scrollbar_gap 0.1
#: Espacio entre la barra de desplazamiento y el borde de la ventana.
#: Valores: Número flotante (ej: 0.1).

# scrollbar_min_handle_height 1
#: Altura mínima del "mango" (en unidades de altura de celda).
#: Valores: Número entero positivo.

# scrollbar_hitbox_expansion 0.25
#: Área extra para facilitar la captura del "mango".
#: Valores: Número flotante (ej: 0.25).

# scrollbar_track_opacity 0
#: Opacidad de la pista de la barra de desplazamiento (el fondo).
#: Valores: Número flotante entre 0 y 1.

# scrollbar_track_hover_opacity 0.1
#: Opacidad de la pista al pasar el ratón por encima.
#: Valores: Número flotante entre 0 y 1.

# scrollbar_handle_color foreground
#: Color del "mango" de la barra de desplazamiento.
#: Valores: 'foreground', 'selection_background', o color hexadecimal/nombre (ej: #FF0000, 'red').

# scrollbar_track_color foreground
#: Color de la pista de la barra de desplazamiento (el fondo).
#: Valores: 'foreground', 'selection_background', o color hexadecimal/nombre.

scrollback_pager nvim --cmd 'set eventignore=FileType' +'nnoremap q ZQ' +'call nvim_open_term(0, {})' +'set nomodified nolist' +'$' -
#: Programa usado para ver el historial completo en una ventana separada.
#: Valores: Comando de la *shell* (ej: 'less', 'nvim --cmd...').

scrollback_pager_history_size 250
#: Tamaño del historial (en MB) solo para el paginador. '0' lo deshabilita.
#: Valores: Número entero (MB).

# scrollback_fill_enlarged_window no
#: Rellena el nuevo espacio con historial al agrandar la ventana.
#: Valores: 'yes' o 'no'.

# wheel_scroll_multiplier 5.0
#: Multiplicador de líneas desplazadas por la rueda del ratón (para dispositivos de baja precisión).
#: Valores: Número flotante (ej: 5.0).

# wheel_scroll_min_lines 1
#: Mínimo de líneas desplazadas por la rueda del ratón.
#: Valores: Número entero.

# touch_scroll_multiplier 1.0
#: Multiplicador de líneas desplazadas por un *touchpad* (para dispositivos de alta precisión).
#: Valores: Número flotante (ej: 1.0).

#: }}}

#: Mouse {{{

mouse_hide_wait -1
#: Segundos sin uso para ocultar el cursor del ratón.
#: Valores: Número flotante (segundos), '0' (desactiva), Negativo (oculta al teclear).

# url_color #0087bd
# url_style curly
#: Color y estilo de subrayado para URLs al pasar el ratón.
#: Valores de url_style: 'none', 'straight', 'double', 'curly', 'dotted', 'dashed'.

# open_url_with default
#: Programa para abrir URLs al hacer clic.
#: Valores: 'default' (usa el SO) o nombre del programa (ej: 'firefox').

# url_prefixes file ftp ftps gemini git gopher http https irc ircs kitty mailto news sftp ssh
#: Prefijos de URL que Kitty debe buscar y detectar.
#: Valores: Lista de prefijos separados por espacio.

# detect_urls yes
#: Si Kitty debe buscar y detectar URLs de texto plano bajo el ratón.
#: Valores: 'yes' o 'no'.

# url_excluded_characters
#: Caracteres adicionales a excluir al detectar URLs.
#: Valores: Cadena de caracteres (ej: '[]').

# show_hyperlink_targets no
#: Muestra la URL de destino al pasar el ratón sobre un hipervínculo.
#: Valores: 'yes' o 'no'.

# underline_hyperlinks hover
#: Controla cuándo se subrayan los **hipervínculos reales (OSC 8)**.
#: Valores: 'hover', 'always', 'never'.

# copy_on_select no
#: Copia al portapapeles o a un búfer privado al seleccionar texto.
#: Valores: 'clipboard', nombre-de-buffer (ej: 'a1'), o 'no'.

# clear_selection_on_clipboard_loss no
#: Borra la selección si el contenido del portapapeles ya no coincide.
#: Valores: 'yes' o 'no'.

paste_actions quote-urls-at-prompt,confirm
#: Acciones al pegar texto (seguridad, formato).
#: Valores: Lista separada por comas (ej: 'confirm', 'replace-newline', 'filter').

strip_trailing_spaces always
#: Elimina espacios al final de líneas al copiar.
#: Valores: 'never', 'smart', 'always'.

# select_by_word_characters @-./_~?&=%+#
#: Caracteres adicionales considerados parte de una palabra al hacer doble clic.
#: Valores: Cadena de caracteres.

# select_by_word_characters_forward
#: Caracteres adicionales para la extensión de selección hacia adelante.
#: Valores: Cadena de caracteres. Si está vacío, usa `select_by_word_characters`.

# click_interval -1.0
#: Intervalo (en segundos) para detectar doble/triple clic.
#: Valores: Número flotante (segundos) o Negativo (usa el sistema).

# focus_follows_mouse no
#: La ventana bajo el ratón se convierte automáticamente en la activa.
#: Valores: 'yes' o 'no'.

# pointer_shape_when_grabbed arrow
#: Forma del puntero cuando un programa captura el ratón.
#: Valores: Nombre del puntero (ej: 'arrow', 'beam').

# default_pointer_shape beam
#: Forma predeterminada del puntero.
#: Valores: Nombre del puntero (ej: 'beam', 'crosshair').

# pointer_shape_when_dragging beam crosshair
#: Forma del puntero al seleccionar texto (el segundo valor es para selección rectangular).
#: Valores: Uno o dos nombres de puntero (ej: 'beam crosshair').

#: Mouse actions {{{

# clear_all_mouse_actions no
#: Elimina todas las acciones de ratón predefinidas hasta este punto.
#: Valores: 'yes' o 'no'.

# mouse_map left click ungrabbed mouse_handle_click selection link prompt
#:: Acción principal: maneja selección, enlaces (links) o mueve el cursor del prompt al hacer clic izquierdo.

# mouse_map shift+left click grabbed,ungrabbed mouse_handle_click selection link prompt
#:: Similar a la anterior, pero se ejecuta incluso si un programa tiene "capturado" el ratón.

# mouse_map ctrl+shift+left release grabbed,ungrabbed mouse_handle_click link
#:: Clic en enlace para evitar el retraso de `click_interval`.

# mouse_map ctrl+shift+left press grabbed discard_event
#:: Descarta el evento `press` cuando se usa el atajo anterior.

# mouse_map middle release ungrabbed paste_from_selection
#:: Pega desde la selección primaria (típico en Linux) al soltar el botón central.

# mouse_map left press ungrabbed mouse_selection normal
#:: Inicia una selección normal con el clic izquierdo.

# mouse_map ctrl+alt+left press ungrabbed mouse_selection rectangle
#:: Inicia una selección rectangular (de bloque) con Ctrl+Alt+Clic Izquierdo.

# mouse_map left doublepress ungrabbed mouse_selection word
#:: Selecciona una palabra completa con doble clic.

# mouse_map left triplepress ungrabbed mouse_selection line
#:: Selecciona una línea completa con triple clic.

# mouse_map ctrl+alt+left triplepress ungrabbed mouse_selection line_from_point
#:: Selecciona desde el punto hasta el final de la línea.

# mouse_map right press ungrabbed mouse_selection extend
#:: Extiende la selección actual con el clic derecho.

# mouse_map shift+middle release ungrabbed,grabbed paste_selection
# mouse_map shift+middle press grabbed discard_event
#:: Pega desde la selección primaria, incluso si el ratón está capturado.

# mouse_map shift+left press ungrabbed,grabbed mouse_selection normal
#:: Inicia selección normal, incluso si el ratón está capturado.

# mouse_map ctrl+shift+alt+left press ungrabbed,grabbed mouse_selection rectangle
#:: Inicia selección rectangular, incluso si el ratón está capturado.

# mouse_map shift+left doublepress ungrabbed,grabbed mouse_selection word
#:: Selecciona palabra con doble clic, incluso si el ratón está capturado.

# mouse_map shift+left triplepress ungrabbed,grabbed mouse_selection line
#:: Selecciona línea con triple clic, incluso si el ratón está capturado.

# mouse_map ctrl+shift+alt+left triplepress ungrabbed,grabbed mouse_selection line_from_point
#:: Selecciona línea desde punto, incluso si el ratón está capturado.

# mouse_map shift+right press ungrabbed,grabbed mouse_selection extend
#:: Extiende la selección, incluso si el ratón está capturado.

# mouse_map ctrl+shift+right press ungrabbed mouse_show_command_output
#:: Muestra la salida del comando clicado en el paginador (requiere integración de shell).

#: }}}

#: }}}

#: Performance tuning {{{

# repaint_delay 10
#: Retardo entre actualizaciones de pantalla (en milisegundos). Menor valor = más FPS.
#: Valores: Número entero positivo (ms).

# input_delay 3
#: Retardo antes de procesar la entrada del programa (en milisegundos). Menor valor = más reactividad.
#: Valores: Número entero positivo (ms).

sync_to_monitor yes
#: Sincroniza las actualizaciones con la tasa de refresco del monitor (previene *screen tearing*).
#: Valores: 'yes' o 'no'.

#: }}}

#: Terminal bell {{{

enable_audio_bell no
#: Habilita la campana audible (sonido).
#: Valores: 'yes' o 'no'.

# visual_bell_duration 0.0
#: Duración de la campana visual (parpadeo de pantalla) en segundos. '0.0' para deshabilitar.
#: Valores: Número flotante (segundos) y opcionalmente una función de 'easing' (ej: '2.0 ease-in-out').

# visual_bell_color none
#: Color usado para el *flash* de la campana visual.
#: Valores: Color hexadecimal o 'none' (usa el fondo de selección).

# window_alert_on_bell yes
#: Solicita la atención de la ventana (ej: icono de barra de tareas parpadeando).
#: Valores: 'yes' o 'no'.

# bell_on_tab "🔔 "
#: Texto o símbolo a mostrar en la pestaña que no está activa al sonar la campana.
#: Valores: Cualquier texto o símbolo Unicode (ej: "🔔 ").

# command_on_bell 'notify-send "Alerta desde shell"'
#: Programa a ejecutar cuando ocurre una campana.
#: Valores: Comando de la *shell* (ej: 'notify-send "¡Alerta!"').

# bell_path none
#: Ruta a un archivo de sonido para usar como campana. 'none' usa el sonido predeterminado del sistema.
#: Valores: Ruta al archivo de sonido (ej: '/ruta/al/sonido.wav') o 'none'.

# linux_bell_theme __custom
#: Tema de sonido XDG que Kitty usará en Linux (solo si no se usa Wayland o si el compositor no lo soporta).
#: Valores: Nombre del tema de sonido (ej: 'freedesktop') o '__custom'.

#: }}}

#: Window layout {{{

# remember_window_size yes
# initial_window_width 640
# initial_window_height 400
#: Si está habilitado, recuerda el tamaño de la ventana. Si no, usa el tamaño inicial (en píxeles o 'c' para celdas).
#: Valores de remember_window_size: 'yes' o 'no'.

# remember_window_position no
#: Si está habilitado, recuerda la posición de la ventana. No funciona en Wayland.
#: Valores: 'yes' o 'no'.

enabled_layouts tall
#: Diseños de ventana habilitados y usados. El primero es el de inicio. '*' para todos.
#: Valores: Lista separada por comas de nombres de layouts (ej: 'stack', 'splits', 'tall', 'grid').

# window_resize_step_cells 2
# window_resize_step_lines 2
#: Tamaño del paso (en celdas) para el redimensionamiento manual de ventanas.
#: Valores: Número entero (celdas/líneas).

# window_border_width 0.5pt
#: Ancho del borde de la ventana (en 'px' o 'pt'). Se muestra solo con múltiples ventanas.
#: Valores: Número seguido de 'px' o 'pt' (ej: '1px', '0.5pt').

# draw_minimal_borders yes
#: Dibuja solo los bordes necesarios (los que separan las ventanas).
#: Valores: 'yes' o 'no'.

# window_margin_width 0
#: Margen (espacio en blanco) fuera del borde (en 'pt').
#: Valores: Uno a cuatro números (top, right, bottom, left) (ej: '5', '5 10').

# single_window_margin_width -1
#: Margen a usar cuando solo una ventana es visible. Negativo usa `window_margin_width`.
#: Valores: Número o lista de números (top, right, bottom, left).

# window_padding_width 0
#: Relleno (espacio en blanco) entre el texto y el borde interno (en 'pt').
#: Valores: Uno a cuatro números (top, right, bottom, left) (ej: '5', '5 10').

# single_window_padding_width -1
#: Relleno a usar cuando solo una ventana es visible. Negativo usa `window_padding_width`.
#: Valores: Número o lista de números (top, right, bottom, left).

# placement_strategy center
#: Controla cómo se distribuye el *padding* extra cuando el tamaño de la ventana no es múltiplo exacto del tamaño de la celda.
#: Valores: 'top-left', 'center', 'bottom-right', etc. (9 opciones de posición).

# active_border_color #00ff00
#: Color del borde de la ventana activa.
#: Valores: Color hexadecimal o 'none'.

# inactive_border_color #cccccc
#: Color del borde de las ventanas inactivas.
#: Valores: Color hexadecimal.

# bell_border_color #ff5a00
#: Color del borde de ventanas inactivas donde sonó la campana.
#: Valores: Color hexadecimal.

# inactive_text_alpha 1.0
#: Nivel de desvanecimiento (opacidad) del texto en ventanas inactivas.
#: Valores: Número flotante entre 0.0 (transparente) y 1.0 (opaco).

hide_window_decorations yes
#: Oculta las decoraciones de la ventana (barra de título y bordes del SO).
#: Valores: 'yes', 'no', 'titlebar-only' (solo macOS), 'titlebar-and-corners' (solo macOS).

# window_logo_path none
#: Ruta a una imagen de logo para mostrar en la ventana.
#: Valores: Ruta de archivo o 'none'.

# window_logo_position bottom-right
#: Posición del logo dentro de la ventana.
#: Valores: 'top-left', 'center', 'bottom-right', etc. (9 opciones de posición).

# window_logo_alpha 0.5
#: Opacidad del logo (0 = transparente, 1 = opaco).
#: Valores: Número flotante entre 0 y 1.

# window_logo_scale 0
#: Porcentaje de escala del logo respecto al tamaño de la ventana (0 desactiva la escala).
#: Valores: Número entero (0-100] o dos números (ancho y alto).

# resize_debounce_time 0.1 0.5
#: Tiempo de espera (en segundos) para redibujar después de pausar/finalizar un redimensionamiento en vivo.
#: Valores: Uno o dos números flotantes (tiempo de pausa y tiempo de finalización).

# resize_in_steps no
#: Redimensiona la ventana en pasos del tamaño de las celdas, no en píxeles.
#: Valores: 'yes' o 'no'.

# visual_window_select_characters 1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ
#: Caracteres usados para la selección visual de ventanas (ej: para enfocar una ventana rápidamente).
#: Valores: Cadena de caracteres únicos (ej: 'ASDFGHJK').

# confirm_os_window_close -1
#: Número mínimo de ventanas de Kitty/pestañas abiertas para pedir confirmación al cerrar una ventana/pestaña del SO.
#: Valores: Número entero (0 = deshabilitar). Negativo cuenta solo ventanas con comandos activos (requiere integración de shell).
#:: Puedes añadir 'count-background' para contar también los trabajos en segundo plano.

#: }}}

#: Tab bar {{{

# tab_bar_edge bottom
#: Borde donde se muestra la barra de pestañas.
#: Valores: 'top' o 'bottom'.

# tab_bar_margin_width 0.0
#: Margen izquierdo y derecho de la barra de pestañas (en pts).
#: Valores: Número flotante (pts).

# tab_bar_margin_height 0.0 0.0
#: Margen arriba (ventana al tab) y abajo (tab al contenido) de la barra (en pts).
#: Valores: Dos números flotantes (ej: '5.0 2.0').

tab_bar_style powerline
#: Estilo visual de la barra de pestañas.
#: Valores: 'fade', 'slant', 'separator', 'powerline', 'custom', 'hidden'.

# tab_bar_filter
#: Muestra solo las pestañas que coinciden con la expresión de búsqueda.
#: Valores: Expresión de búsqueda (ej: 'session:~').

# tab_bar_align left
#: Alineación horizontal de las pestañas en la barra.
#: Valores: 'left', 'center', 'right'.

# tab_bar_min_tabs 2
#: Número mínimo de pestañas que deben existir para mostrar la barra.
#: Valores: Número entero (ej: 1, 2).

# tab_switch_strategy previous
#: Algoritmo para elegir la pestaña a enfocar cuando la pestaña actual se cierra.
#: Valores: 'previous', 'left', 'right', 'last'.

# tab_fade 0.25 0.5 0.75 1
#: Controla cómo se desvanecen los bordes de la pestaña cuando `tab_bar_style` es 'fade'.
#: Valores: Lista de números flotantes entre 0 y 1.

# tab_separator " ┇"
#: Separador entre pestañas cuando el estilo es 'separator'.
#: Valores: Cualquier cadena de texto (ej: " | ").

tab_powerline_style round
#: Estilo del separador cuando el estilo es 'powerline'.
#: Valores: 'angled', 'slanted', 'round'.

tab_activity_symbol *
#: Símbolo a mostrar en la pestaña si hay actividad en una ventana no enfocada.
#: Valores: Texto o símbolo Unicode (ej: " *").

# tab_title_max_length 0
#: Longitud máxima de celdas para el texto del título de la pestaña. '0' para sin límite.
#: Valores: Número entero (celdas).

# tab_title_template "{fmt.fg.red}{bell_symbol}{activity_symbol}{fmt.fg.tab}{tab.last_focused_progress_percent}{title}"
#: Plantilla para renderizar el título de la pestaña.

# active_tab_title_template none
#: Plantilla para pestañas activas. Si es 'none', usa `tab_title_template`.
#: Valores: Plantilla de título o 'none'.

# active_tab_foreground #000
# active_tab_background #eee
# active_tab_font_style bold-italic
# inactive_tab_foreground #444
# inactive_tab_background #999
# inactive_tab_font_style normal
#: Colores y estilo de fuente para pestañas activas e inactivas.
#: Valores: Color hexadecimal, 'none', o estilos ('normal', 'bold', 'italic', 'bold-italic').

# tab_bar_background none
#: Color de fondo de la barra de pestañas.
#: Valores: Color hexadecimal o 'none' (usa el fondo de la terminal).

# tab_bar_margin_color none
#: Color del área de margen de la barra de pestañas.
#: Valores: Color hexadecimal o 'none' (usa el fondo de la terminal).

#: }}}

#: Color scheme {{{

# foreground #dddddd
# background #000000
#: Colores de primer plano (texto) y fondo predeterminados.
#: Valores: Color hexadecimal (ej: #FF0000).

# background_opacity 1.0
#: Opacidad del fondo (0.0 = transparente, 1.0 = opaco).
#: Valores: Número flotante entre 0 y 1.

# background_blur 0
#: Radio de desenfoque (*blur*) del fondo transparente.
#: Valores: Número entero positivo (funciona en macOS y KDE).

# transparent_background_colors
#: Lista de colores, con opacidad opcional, que se renderizarán como transparentes si coinciden con el fondo de una celda.
#: Valores: Lista de 'color@opacity' (ej: 'red@0.5 #00FF00@0.3').

# dynamic_background_opacity no
#: Permite cambiar la opacidad de fondo dinámicamente (por atajos de teclado o control remoto).
#: Valores: 'yes' o 'no'.

# background_image none
#: Ruta a una imagen de fondo (PNG, JPEG, etc.).
#: Valores: Ruta de archivo o 'none'.

# background_image_layout tiled
#: Modo en que se ajusta la imagen de fondo.
#: Valores: 'tiled', 'mirror-tiled', 'scaled', 'clamped', 'centered', 'cscaled'.

# background_image_linear no
#: Usa interpolación lineal al escalar la imagen de fondo.
#: Valores: 'yes' o 'no'.

# background_tint 0.0
#: Cuánto tintar la imagen de fondo con el color de fondo principal (para mejorar la legibilidad del texto). Solo aplica si hay `background_image`.
#: Valores: Número flotante entre 0.0 y 1.0.

# background_tint_gaps 1.0
#: Tintado adicional aplicado a la imagen en los huecos de la ventana.
#: Valores: Número flotante entre 0.0 y 1.0.

# dim_opacity 0.4
#: Opacidad para atenuar el texto con el atributo DIM/FAINT.
#: Valores: Número flotante entre 0.0 (invisible) y 1.0 (sin atenuación).

# selection_foreground #000000
# selection_background #fffacd
#: Colores de primer plano y fondo para el texto seleccionado con el ratón.
#: Valores: Color hexadecimal o 'none' (para efecto de video inverso).

#: The color table {{{

# color0 #000000
# color8 #767676
# color1 #cc0403
# color9 #f2201f
# color2 #19cb00
# color10 #23fd00
# color3 #cecb00
# color11 #fffd00
# color4 #0d73cc
# color12 #1a8fff
# color5 #cb1ed1
# color13 #fd28ff
# color6 #0dcdcd
# color14 #14ffff
# color7 #dddddd
# color15 #ffffff
#: Los 16 primeros colores de la paleta ANSI (colores base, del 0 al 7, y sus versiones brillantes, del 8 al 15).
#: Valores: Color hexadecimal.

# mark1_foreground black
# mark1_background #98d3cb
# mark2_foreground black
# mark2_background #f2dcd3
# mark3_foreground black
# mark3_background #f274bc
#: Colores de primer plano y fondo para las marcas de texto (ej: `mark_by_word`).
#: Valores: Color hexadecimal o nombre de color.

#: }}}

#: }}}

#: Advanced {{{

# shell .

#: The shell program to execute. The default value of . means to use
#: the value of of the SHELL environment variable or if unset,
#: whatever shell is set as the default shell for the current user.
#: Note that on macOS if you change this, you might need to add
#: --login and --interactive to ensure that the shell starts in
#: interactive mode and reads its startup rc files. Environment
#: variables are expanded in this setting.

# editor .

#: The terminal based text editor (such as vim or nano) to use when
#: editing the kitty config file or similar tasks.

#: The default value of . means to use the environment variables
#: VISUAL and EDITOR in that order. If these variables aren't set,
#: kitty will run your shell ($SHELL -l -i -c env) to see if your
#: shell startup rc files set VISUAL or EDITOR. If that doesn't work,
#: kitty will cycle through various known editors (vim, emacs, etc.)
#: and take the first one that exists on your system.

# close_on_child_death no

#: Close the window when the child process (usually the shell) exits.
#: With the default value no, the terminal will remain open when the
#: child exits as long as there are still other processes outputting
#: to the terminal (for example disowned or backgrounded processes).
#: When enabled with yes, the window will close as soon as the child
#: process exits. Note that setting it to yes means that any
#: background processes still using the terminal can fail silently
#: because their stdout/stderr/stdin no longer work.

# remote_control_password

#: Allow other programs to control kitty using passwords. This option
#: can be specified multiple times to add multiple passwords. If no
#: passwords are present kitty will ask the user for permission if a
#: program tries to use remote control with a password. A password can
#: also *optionally* be associated with a set of allowed remote
#: control actions. For example::

#:     remote_control_password "my passphrase" get-colors set-colors focus-window focus-tab

#: Only the specified actions will be allowed when using this
#: password. Glob patterns can be used too, for example::

#:     remote_control_password "my passphrase" set-tab-* resize-*

#: To get a list of available actions, run::

#:     kitten @ --help

#: A set of actions to be allowed when no password is sent can be
#: specified by using an empty password. For example::

#:     remote_control_password "" *-colors

#: Finally, the path to a python module can be specified that provides
#: a function is_cmd_allowed that is used to check every remote
#: control command. For example::

#:     remote_control_password "my passphrase" my_rc_command_checker.py

#: Relative paths are resolved from the kitty configuration directory.
#: See rc_custom_auth <https://sw.kovidgoyal.net/kitty/remote-
#: control/#rc-custom-auth> for details.

# allow_remote_control no

#: Allow other programs to control kitty. If you turn this on, other
#: programs can control all aspects of kitty, including sending text
#: to kitty windows, opening new windows, closing windows, reading the
#: content of windows, etc. Note that this even works over SSH
#: connections. The default setting of no prevents any form of remote
#: control. The meaning of the various values are:

#: password
#:     Remote control requests received over both the TTY device and the socket
#:     are confirmed based on passwords, see remote_control_password.

#: socket-only
#:     Remote control requests received over a socket are accepted
#:     unconditionally. Requests received over the TTY are denied.
#:     See listen_on.

#: socket
#:     Remote control requests received over a socket are accepted
#:     unconditionally. Requests received over the TTY are confirmed based on
#:     password.

#: no
#:     Remote control is completely disabled.

#: yes
#:     Remote control requests are always accepted.

# listen_on none

#: Listen to the specified socket for remote control connections. Note
#: that this will apply to all kitty instances. It can be overridden
#: by the kitty --listen-on command line option. For UNIX sockets,
#: such as unix:${TEMP}/mykitty or unix:@mykitty (on Linux).
#: Environment variables are expanded and relative paths are resolved
#: with respect to the temporary directory. If {kitty_pid} is present,
#: then it is replaced by the PID of the kitty process, otherwise the
#: PID of the kitty process is appended to the value, with a hyphen.
#: For TCP sockets such as tcp:localhost:0 a random port is always
#: used even if a non-zero port number is specified.  See the help for
#: kitty --listen-on for more details. Note that this will be ignored
#: unless allow_remote_control is set to either: yes, socket or
#: socket-only. Changing this option by reloading the config is not
#: supported.

# env

#: Specify the environment variables to be set in all child processes.
#: Using the name with an equal sign (e.g. env VAR=) will set it to
#: the empty string. Specifying only the name (e.g. env VAR) will
#: remove the variable from the child process' environment. Note that
#: environment variables are expanded recursively, for example::

#:     env VAR1=a
#:     env VAR2=${HOME}/${VAR1}/b

#: The value of VAR2 will be <path to home directory>/a/b.

# filter_notification

#: Specify rules to filter out notifications sent by applications
#: running in kitty. Can be specified multiple times to create
#: multiple filter rules. A rule specification is of the form
#: field:regexp. A filter rule can match on any of the fields: title,
#: body, app, type. The special value of all filters out all
#: notifications. Rules can be combined using Boolean operators. Some
#: examples::

#:     filter_notification title:hello or body:"abc.*def"
#:     # filter out notification from vim except for ones about updates, (?i)
#:     # makes matching case insensitive.
#:     filter_notification app:"[ng]?vim" and not body:"(?i)update"
#:     # filter out all notifications
#:     filter_notification all

#: The field app is the name of the application sending the
#: notification and type is the type of the notification. Not all
#: applications will send these fields, so you can also match on the
#: title and body of the notification text. More sophisticated
#: programmatic filtering and custom actions on notifications can be
#: done by creating a notifications.py file in the kitty config
#: directory (~/.config/kitty). An annotated sample is available
#: <https://github.com/kovidgoyal/kitty/blob/master/docs/notifications.py>.

# watcher

#: Path to python file which will be loaded for watchers
#: <https://sw.kovidgoyal.net/kitty/launch/#watchers>. Can be
#: specified more than once to load multiple watchers. The watchers
#: will be added to every kitty window. Relative paths are resolved
#: relative to the kitty config directory. Note that reloading the
#: config will only affect windows created after the reload.

# exe_search_path

#: Control where kitty finds the programs to run. The default search
#: order is: First search the system wide PATH, then ~/.local/bin and
#: ~/bin. If still not found, the PATH defined in the login shell
#: after sourcing all its startup files is tried. Finally, if present,
#: the PATH specified by the env option is tried.

#: This option allows you to prepend, append, or remove paths from
#: this search order. It can be specified multiple times for multiple
#: paths. A simple path will be prepended to the search order. A path
#: that starts with the + sign will be append to the search order,
#: after ~/bin above. A path that starts with the - sign will be
#: removed from the entire search order. For example::

#:     exe_search_path /some/prepended/path
#:     exe_search_path +/some/appended/path
#:     exe_search_path -/some/excluded/path

# update_check_interval 24

#: The interval to periodically check if an update to kitty is
#: available (in hours). If an update is found, a system notification
#: is displayed informing you of the available update. The default is
#: to check every 24 hours, set to zero to disable. Update checking is
#: only done by the official binary builds. Distro packages or source
#: builds do not do update checking. Changing this option by reloading
#: the config is not supported.

# startup_session none

#: Path to a session file to use for all kitty instances. Can be
#: overridden by using the kitty --session =none command line option
#: for individual instances. See sessions
#: <https://sw.kovidgoyal.net/kitty/sessions/> in the kitty
#: documentation for details. Note that relative paths are interpreted
#: with respect to the kitty config directory. Environment variables
#: in the path are expanded. Changing this option by reloading the
#: config is not supported. Note that if kitty is invoked with command
#: line arguments specifying a command to run, this option is ignored.

# clipboard_control write-clipboard write-primary read-clipboard-ask read-primary-ask

#: Allow programs running in kitty to read and write from the
#: clipboard. You can control exactly which actions are allowed. The
#: possible actions are: write-clipboard, read-clipboard, write-
#: primary, read-primary, read-clipboard-ask, read-primary-ask. The
#: default is to allow writing to the clipboard and primary selection
#: and to ask for permission when a program tries to read from the
#: clipboard. Note that disabling the read confirmation is a security
#: risk as it means that any program, even the ones running on a
#: remote server via SSH can read your clipboard. See also
#: clipboard_max_size.

# clipboard_max_size 512

#: The maximum size (in MB) of data from programs running in kitty
#: that will be stored for writing to the system clipboard. A value of
#: zero means no size limit is applied. See also clipboard_control.

# file_transfer_confirmation_bypass

#: The password that can be supplied to the file transfer kitten
#: <https://sw.kovidgoyal.net/kitty/kittens/transfer/> to skip the
#: transfer confirmation prompt. This should only be used when
#: initiating transfers from trusted computers, over trusted networks
#: or encrypted transports, as it allows any programs running on the
#: remote machine to read/write to the local filesystem, without
#: permission.

# allow_hyperlinks yes

#: Process hyperlink escape sequences (OSC 8). If disabled OSC 8
#: escape sequences are ignored. Otherwise they become clickable
#: links, that you can click with the mouse or by using the hints
#: kitten <https://sw.kovidgoyal.net/kitty/kittens/hints/>. The
#: special value of ask means that kitty will ask before opening the
#: link when clicked.

# shell_integration enabled

#: Enable shell integration on supported shells. This enables features
#: such as jumping to previous prompts, browsing the output of the
#: previous command in a pager, etc. on supported shells. Set to
#: disabled to turn off shell integration, completely. It is also
#: possible to disable individual features, set to a space separated
#: list of these values: no-rc, no-cursor, no-title, no-cwd, no-
#: prompt-mark, no-complete, no-sudo. See Shell integration
#: <https://sw.kovidgoyal.net/kitty/shell-integration/> for details.

# allow_cloning ask

#: Control whether programs running in the terminal can request new
#: windows to be created. The canonical example is clone-in-kitty
#: <https://sw.kovidgoyal.net/kitty/shell-integration/#clone-shell>.
#: By default, kitty will ask for permission for each clone request.
#: Allowing cloning unconditionally gives programs running in the
#: terminal (including over SSH) permission to execute arbitrary code,
#: as the user who is running the terminal, on the computer that the
#: terminal is running on.

# clone_source_strategies venv,conda,env_var,path

#: Control what shell code is sourced when running clone-in-kitty in
#: the newly cloned window. The supported strategies are:

#: venv
#:     Source the file $VIRTUAL_ENV/bin/activate. This is used by the
#:     Python stdlib venv module and allows cloning venvs automatically.
#: conda
#:     Run conda activate $CONDA_DEFAULT_ENV. This supports the virtual
#:     environments created by conda.
#: env_var
#:     Execute the contents of the environment variable
#:     KITTY_CLONE_SOURCE_CODE with eval.
#: path
#:     Source the file pointed to by the environment variable
#:     KITTY_CLONE_SOURCE_PATH.

#: This option must be a comma separated list of the above values.
#: Only the first valid match, in the order specified, is sourced.

# notify_on_cmd_finish never

#: Show a desktop notification when a long-running command finishes
#: (needs shell_integration). The possible values are:

#: never
#:     Never send a notification.

#: unfocused
#:     Only send a notification when the window does not have keyboard focus.

#: invisible
#:     Only send a notification when the window both is unfocused and not visible
#:     to the user, for example, because it is in an inactive tab or its OS window
#:     is not currently visible (on platforms that support OS window visibility querying
#:     this considers an OS Window visible iff it is active).

#: always
#:     Always send a notification, regardless of window state.

#: There are two optional arguments:

#: First, the minimum duration for what is considered a long running
#: command. The default is 5 seconds. Specify a second argument to set
#: the duration. For example: invisible 15. Do not set the value too
#: small, otherwise a command that launches a new OS Window and exits
#: will spam a notification.

#: Second, the action to perform. The default is notify. The possible
#: values are:

#: notify
#:     Send a desktop notification. The subsequent arguments are optional and specify when
#:     the notification is automatically cleared. The set of possible events when the notification is
#:     cleared are: focus and next. focus means that when the notification
#:     policy is unfocused or invisible the notification is automatically cleared
#:     when the window regains focus. The value of next means that the previous notification
#:     is cleared when the next notification is shown. The default when no arguments are specified
#:     is: focus next.

#: bell
#:     Ring the terminal bell.

#: notify-bell
#:     Send a desktop notification and ring the terminal bell.
#:     The arguments are the same as for `notify`.

#: command
#:     Run a custom command. All subsequent arguments are the cmdline to run.

#: Some more examples::

#:     # Send a notification when a command takes more than 5 seconds in an unfocused window
#:     notify_on_cmd_finish unfocused
#:     # Send a notification when a command takes more than 10 seconds in a invisible window
#:     notify_on_cmd_finish invisible 10.0
#:     # Ring a bell when a command takes more than 10 seconds in a invisible window
#:     notify_on_cmd_finish invisible 10.0 bell
#:     # Run 'notify-send' when a command takes more than 10 seconds in a invisible window
#:     # Here %c is replaced by the current command line and %s by the job exit code
#:     notify_on_cmd_finish invisible 10.0 command notify-send "job finished with status: %s" %c
#:     # Do not clear previous notification when next command finishes or window regains focus
#:     notify_on_cmd_finish invisible 5.0 notify

# term xterm-kitty

#: The value of the TERM environment variable to set. Changing this
#: can break many terminal programs, only change it if you know what
#: you are doing, not because you read some advice on "Stack Overflow"
#: to change it. The TERM variable is used by various programs to get
#: information about the capabilities and behavior of the terminal. If
#: you change it, depending on what programs you run, and how
#: different the terminal you are changing it to is, various things
#: from key-presses, to colors, to various advanced features may not
#: work. Changing this option by reloading the config will only affect
#: newly created windows.

# terminfo_type path

#: The value of the TERMINFO environment variable to set. This
#: variable is used by programs running in the terminal to search for
#: terminfo databases. The default value of path causes kitty to set
#: it to a filesystem location containing the kitty terminfo database.
#: A value of direct means put the entire database into the env var
#: directly. This can be useful when connecting to containers, for
#: example. But, note that not all software supports this. A value of
#: none means do not touch the variable.

# forward_stdio no

#: Forward STDOUT and STDERR of the kitty process to child processes.
#: This is useful for debugging as it allows child processes to print
#: to kitty's STDOUT directly. For example, echo hello world
#: >&$KITTY_STDIO_FORWARDED in a shell will print to the parent
#: kitty's STDOUT. Sets the KITTY_STDIO_FORWARDED=fdnum environment
#: variable so child processes know about the forwarding. Note that on
#: macOS this prevents the shell from being run via the login utility
#: so getlogin() will not work in programs run in this session.

# menu_map

#: Specify entries for various menus in kitty. Currently only the
#: global menubar on macOS is supported. For example::

#:    menu_map global "Actions::Launch something special" launch --hold --type=os-window sh -c "echo hello world"

#: This will create a menu entry named "Launch something special" in
#: an "Actions" menu in the macOS global menubar. Sub-menus can be
#: created by adding more levels separated by the :: characters.

#: }}}

#: OS specific tweaks {{{

# wayland_titlebar_color system

#: The color of the kitty window's titlebar on Wayland systems with
#: client side window decorations such as GNOME. A value of system
#: means to use the default system colors, a value of background means
#: to use the background color of the currently active kitty window
#: and finally you can use an arbitrary color, such as #12af59 or red.

# macos_titlebar_color system

#: The color of the kitty window's titlebar on macOS. A value of
#: system means to use the default system color, light or dark can
#: also be used to set it explicitly. A value of background means to
#: use the background color of the currently active window and finally
#: you can use an arbitrary color, such as #12af59 or red.

# macos_option_as_alt no

#: Use the Option key as an Alt key on macOS. With this set to no,
#: kitty will use the macOS native Option+Key to enter Unicode
#: character behavior. This will break any Alt+Key keyboard shortcuts
#: in your terminal programs, but you can use the macOS Unicode input
#: technique. You can use the values: left, right or both to use only
#: the left, right or both Option keys as Alt, instead. Note that
#: kitty itself always treats Option the same as Alt. This means you
#: cannot use this option to configure different kitty shortcuts for
#: Option+Key vs. Alt+Key. Also, any kitty shortcuts using
#: Option/Alt+Key will take priority, so that any such key presses
#: will not be passed to terminal programs running inside kitty.
#: Changing this option by reloading the config is not supported.

# macos_hide_from_tasks no

#: Hide the kitty window from running tasks on macOS (⌘+Tab and the
#: Dock). Changing this option by reloading the config is not
#: supported.

# macos_quit_when_last_window_closed no

#: Have kitty quit when all the top-level windows are closed on macOS.
#: By default, kitty will stay running, even with no open windows, as
#: is the expected behavior on macOS.

# macos_window_resizable yes

#: Disable this if you want kitty top-level OS windows to not be
#: resizable on macOS.

# macos_thicken_font 0

#: Draw an extra border around the font with the given width, to
#: increase legibility at small font sizes on macOS. For example, a
#: value of 0.75 will result in rendering that looks similar to sub-
#: pixel antialiasing at common font sizes. Note that in modern kitty,
#: this option is obsolete (although still supported). Consider using
#: text_composition_strategy instead.

# macos_traditional_fullscreen no

#: Use the macOS traditional full-screen transition, that is faster,
#: but less pretty.

# macos_show_window_title_in all

#: Control where the window title is displayed on macOS. A value of
#: window will show the title of the currently active window at the
#: top of the macOS window. A value of menubar will show the title of
#: the currently active window in the macOS global menu bar, making
#: use of otherwise wasted space. A value of all will show the title
#: in both places, and none hides the title. See
#: macos_menubar_title_max_length for how to control the length of the
#: title in the menu bar.

# macos_menubar_title_max_length 0

#: The maximum number of characters from the window title to show in
#: the macOS global menu bar. Values less than one means that there is
#: no maximum limit.

# macos_custom_beam_cursor no

#: Use a custom mouse cursor for macOS that is easier to see on both
#: light and dark backgrounds. Nowadays, the default macOS cursor
#: already comes with a white border. WARNING: this might make your
#: mouse cursor invisible on dual GPU machines. Changing this option
#: by reloading the config is not supported.

# macos_colorspace srgb

#: The colorspace in which to interpret terminal colors. The default
#: of srgb will cause colors to match those seen in web browsers. The
#: value of default will use whatever the native colorspace of the
#: display is. The value of displayp3 will use Apple's special
#: snowflake display P3 color space, which will result in over
#: saturated (brighter) colors with some color shift. Reloading
#: configuration will change this value only for newly created OS
#: windows.

# linux_display_server auto

#: Choose between Wayland and X11 backends. By default, an appropriate
#: backend based on the system state is chosen automatically. Set it
#: to x11 or wayland to force the choice. Changing this option by
#: reloading the config is not supported.

# wayland_enable_ime yes

#: Enable Input Method Extension on Wayland. This is typically used
#: for inputting text in East Asian languages. However, its
#: implementation in Wayland is often buggy and introduces latency
#: into the input loop, so disable this if you know you dont need it.
#: Changing this option by reloading the config is not supported, it
#: will not have any effect.

#: }}}

#: Keyboard shortcuts {{{

# kitty_mod ctrl+shift
#: Alias para el modificador especial usado en los atajos predeterminados de Kitty.
#: Valores: Combinación de modificadores (ej: 'ctrl+alt', 'super').

# clear_all_shortcuts no
#: Elimina todos los atajos de teclado predefinidos.
#: Valores: 'yes' o 'no'.

# action_alias
#:: Define alias para acciones complejas y evitar repetición.
#:: Sintaxis: action_alias <nombre> <acción> (ej: 'launch_tab launch --type=tab --cwd=current').

# kitten_alias
#:: Alias para los *kittens* (herramientas internas). Preferir `action_alias`.
#:: Sintaxis: kitten_alias <nombre> <acción-kitten> (ej: 'hints hints --hints-offset=0').

#: Clipboard {{{

map ctrl+c copy_or_interrupt
#:: Copia la selección al portapapeles del sistema.
#:: Otras acciones: 'copy_or_interrupt', 'copy_and_clear_or_interrupt', 'copy_or_noop'.

# map cmd+c copy_or_noop
map ctrl+v paste_from_clipboard
# map cmd+v paste_from_clipboard
#:: Pega desde el portapapeles del sistema.

# map kitty_mod+s paste_from_selection
# map shift+insert paste_from_selection
#:: Pega desde la selección primaria (típico búfer central en Linux).

# map kitty_mod+o pass_selection_to_program
#:: Pasa la selección a un programa externo (por defecto, el abridor del SO).
#:: Se puede especificar el programa (ej: 'pass_selection_to_program firefox').

#: }}}

---

#: Scrolling {{{

# map kitty_mod+up scroll_line_up
# map kitty_mod+down scroll_line_down
# map kitty_mod+page_up scroll_page_up
# map kitty_mod+page_down scroll_page_down
# map kitty_mod+home scroll_home
# map kitty_mod+end scroll_end
#:: Atajos para desplazarse en el búfer de historial.

# map kitty_mod+z scroll_to_prompt -1
#:: Se desplaza al *prompt* anterior (requiere integración de shell).

# map kitty_mod+x scroll_to_prompt 1
#:: Se desplaza al *prompt* siguiente (requiere integración de shell).

# map kitty_mod+h show_scrollback
#:: Abre el historial completo en el paginador configurado (nvim, less, etc.).

# map kitty_mod+g show_last_command_output
#:: Muestra la salida del último comando de *shell* en el paginador.

#: }}}

---

#: Window management {{{

map ctrl+enter new_window --cwd=current
#:: Abre una nueva ventana (split) en la pestaña actual.
#:: Opciones de 'launch': `--cwd=current` (mismo directorio), `--location=neighbor` (al lado).

# map kitty_mod+n new_os_window
#:: Abre una nueva ventana de nivel superior del SO.

map ctrl+w close_window
#:: Cierra la ventana activa (split).

map ctrl+h next_window
map ctrl+l previous_window
#:: Navega a la ventana (split) siguiente/anterior.

# map kitty_mod+f move_window_forward
# map kitty_mod+b move_window_backward
#:: Mueve la ventana activa hacia adelante/atrás en el orden del diseño.

# map kitty_mod+r start_resizing_window
#:: Inicia el modo de redimensionamiento de ventana con el teclado.

map ctrl+1 first_window
map ctrl+9 ninth_window
map ctrl+0 tenth_window
#:: Cambia el foco a la ventana (split) por su número de índice.

# map kitty_mod+f7 focus_visible_window
#:: Muestra una superposición visual para seleccionar una ventana con una sola tecla.

# map kitty_mod+f8 swap_with_window
#:: Muestra una superposición visual para intercambiar la posición de la ventana activa con otra.

#: }}}

---

#: Tab management {{{

# map alt+right next_tab
# map kitty_mod+left previous_tab
#:: Navega a la pestaña siguiente/anterior.

# map kitty_mod+t new_tab
#:: Abre una nueva pestaña.

# map kitty_mod+q close_tab
#:: Cierra la pestaña activa.

# map kitty_mod+. move_tab_forward
# map kitty_mod+, move_tab_backward
#:: Mueve la pestaña activa hacia adelante/atrás en la barra.

map kitty_mod+t set_tab_title
#:: Permite al usuario configurar el título de la pestaña.

#:: Atajos para ir a una pestaña específica: map ctrl+alt+1 goto_tab 1
#:: Para abrir una nueva pestaña junto a la actual: map ctrl+t new_tab !neighbor
#: }}}

---

#: Layout management {{{

# map kitty_mod+l next_layout
#:: Alterna al siguiente diseño de ventana habilitado.

#:: Atajos para ir a un diseño específico: map ctrl+alt+t goto_layout tall
#:: Para alternar entre dos diseños (ej: 'zoom'): map ctrl+alt+z toggle_layout stack
#: }}}

---

#: Font sizes {{{

# map kitty_mod+equal change_font_size all +2.0
# map kitty_mod+minus change_font_size all -2.0
# map kitty_mod+backspace change_font_size all 0
#:: Aumenta, disminuye y restablece el tamaño de la fuente. 'all' aplica a todas las ventanas.
#:: Opciones de tamaño: '+2.0' (incremento), '-2.0' (decremento), '0' (reset), '10.0' (tamaño absoluto), '*2.0' (multiplicar).

#: }}}

---

#: Select and act on visible text {{{

# map kitty_mod+e open_url_with_hints
#:: Abre una URL visible usando el teclado y el programa configurado en `open_url_with`.

# map kitty_mod+p>f kitten hints --type path --program -
#:: Selecciona una ruta de archivo visible y la inserta en el prompt.

# map kitty_mod+p>shift+f kitten hints --type path
#:: Selecciona una ruta de archivo visible y la abre con el programa por defecto del SO.

# map kitty_mod+p>n kitten hints --type linenum
#:: Selecciona un patrón 'archivo:número-de-línea' y lo abre en el editor predeterminado en esa línea.

#: }}}

---

#: Miscellaneous {{{

# map kitty_mod+f11 toggle_fullscreen
#:: Alterna el modo de pantalla completa.

# map kitty_mod+f10 toggle_maximized
#:: Alterna el modo maximizado.

# map kitty_mod+f2 edit_config_file
#:: Abre el archivo de configuración actual en el editor predeterminado.

# map kitty_mod+escape kitty_shell window
#:: Abre una *shell* para controlar Kitty remotamente.

# map kitty_mod+a>m set_background_opacity +0.1
# map kitty_mod+a>l set_background_opacity -0.1
# map kitty_mod+a>1 set_background_opacity 1
# map kitty_mod+a>d set_background_opacity default
#:: Atajos para controlar la opacidad de fondo (requiere `dynamic_background_opacity yes`).

# map kitty_mod+delete clear_terminal reset active
#:: Limpia/restablece la terminal.
#:: Opciones de limpieza: 'reset', 'clear', 'scrollback', 'to_cursor', 'last_command'.

# map kitty_mod+f5 load_config_file
#:: Recarga el archivo `kitty.conf` para aplicar cambios dinámicamente.

# map kitty_mod+f6 debug_config
#:: Muestra información detallada de la configuración actual (para depuración).

#:: Envío de texto arbitrario: map ctrl+alt+a send_text all "Comando\r"
#:: Envía texto codificado (incluidos escapes ANSI) al programa de la terminal.

#: }}}